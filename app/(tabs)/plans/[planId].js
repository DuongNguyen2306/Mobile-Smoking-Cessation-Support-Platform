"use client"

import { Ionicons } from "@expo/vector-icons"
import { LinearGradient } from "expo-linear-gradient"
import { useLocalSearchParams, useRouter } from "expo-router"
import { useCallback, useEffect, useState } from "react"
import {
  ActivityIndicator,
  Alert,
  Image,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native"
import { getCurrentQuitPlan, getQuitPlanById, selectQuitPlan } from "../../services/api"

const COLORS = {
  primary: "#4CAF50",
  secondary: "#2E7D32",
  accent: "#66BB6A",
  success: "#4CAF50",
  warning: "#FF9800",
  error: "#FF5722",
  info: "#2196F3",
  text: "#333",
  lightText: "#666",
  background: "#F8FFF8",
  lightBackground: "#F1F8E9",
  white: "#FFFFFF",
  overlay: "rgba(0,0,0,0.3)",
}

const STATUS_CONFIG = {
  ongoing: {
    color: COLORS.success,
    label: "ƒêang th·ª±c hi·ªán",
    icon: "play-circle",
    gradient: ["#4CAF50", "#66BB6A"],
  },
  completed: {
    color: COLORS.info,
    label: "Ho√†n th√†nh",
    icon: "checkmark-circle",
    gradient: ["#2196F3", "#42A5F5"],
  },
  failed: {
    color: COLORS.error,
    label: "Th·∫•t b·∫°i",
    icon: "close-circle",
    gradient: ["#FF5722", "#FF7043"],
  },
  template: {
    color: COLORS.warning,
    label: "M·∫´u k·∫ø ho·∫°ch",
    icon: "document-text",
    gradient: ["#FF9800", "#FFB74D"],
  },
}

export default function QuitPlanDetailScreen() {
  const router = useRouter()
  const { planId } = useLocalSearchParams()
  const [plan, setPlan] = useState(null)
  const [stages, setStages] = useState([])
  const [progress, setProgress] = useState([])
  const [loading, setLoading] = useState(true)
  const [registering, setRegistering] = useState(false)
  const [hasCurrentPlan, setHasCurrentPlan] = useState(false)

  const [statusConfig, setStatusConfig] = useState(STATUS_CONFIG.template)
  const [isTemplate, setIsTemplate] = useState(false)

  useEffect(() => {
    if (planId) {
      loadPlanDetail()
      checkCurrentPlan()
    }
  }, [planId])

  const loadPlanDetail = useCallback(async () => {
    try {
      setLoading(true)
      console.log("Loading plan detail for ID:", planId)
      const response = await getQuitPlanById(planId)

      if (response.status === 200 && response.data) {
        const data = response.data
        console.log("Loaded plan detail:", data)

        // Set plan data
        setPlan(data.plan || data.data?.quitPlan || data.data || data)

        // Set stages if available
        if (data.stages && Array.isArray(data.stages)) {
          setStages(data.stages)
        }

        // Set progress if available
        if (data.progress && Array.isArray(data.progress)) {
          setProgress(data.progress)
        }
      }
    } catch (error) {
      console.error("Error loading plan detail:", error)
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt k·∫ø ho·∫°ch")
    } finally {
      setLoading(false)
    }
  }, [planId])

  const checkCurrentPlan = useCallback(async () => {
    try {
      const response = await getCurrentQuitPlan()
      if (response.status === 200 && response.data) {
        setHasCurrentPlan(true)
        console.log("User has current plan:", response.data)
      }
    } catch (error) {
      // No current plan or error - user can register for new plan
      console.log("No current plan found:", error.response?.status)
      setHasCurrentPlan(false)
    }
  }, [])

  const handleRegisterPlan = async () => {
    // Ki·ªÉm tra xem c√≥ ph·∫£i template kh√¥ng
    if (!isTemplate || plan.status !== "template") {
      Alert.alert(
        "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω",
        "Ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω c√°c k·∫ø ho·∫°ch m·∫´u (template). K·∫ø ho·∫°ch n√†y c√≥ tr·∫°ng th√°i: " + statusConfig.label,
        [{ text: "OK" }],
      )
      return
    }

    if (hasCurrentPlan) {
      Alert.alert("Th√¥ng b√°o", "B·∫°n ƒë√£ c√≥ k·∫ø ho·∫°ch ƒëang th·ª±c hi·ªán. B·∫°n c√≥ mu·ªën thay th·∫ø b·∫±ng k·∫ø ho·∫°ch n√†y kh√¥ng?", [
        { text: "H·ªßy", style: "cancel" },
        { text: "Thay th·∫ø", onPress: () => proceedWithRegistration() },
      ])
    } else {
      proceedWithRegistration()
    }
  }

  const proceedWithRegistration = async () => {
    try {
      setRegistering(true)
      console.log("Registering for template plan:", planId)
      console.log("Plan status:", plan.status)

      // ƒê·∫£m b·∫£o ch·ªâ g·ªçi API v·ªõi template plans
      if (plan.status !== "template") {
        throw new Error("Ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω k·∫ø ho·∫°ch m·∫´u")
      }

      const response = await selectQuitPlan(planId)

      if (response.status === 200 || response.status === 201) {
        Alert.alert(
          "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!",
          "K·∫ø ho·∫°ch b·ªè thu·ªëc c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t. H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông thi·∫øt l·∫≠p ng√†y b·∫Øt ƒë·∫ßu (h√¥m nay) v√† c√°c giai ƒëo·∫°n d·ª±a tr√™n template.",
          [
            {
              text: "Xem k·∫ø ho·∫°ch c·ªßa t√¥i",
              onPress: () => {
                router.push("/current")
              },
            },
            {
              text: "·ªû l·∫°i trang n√†y",
              style: "cancel",
            },
          ],
        )

        // Update plan status locally
        setPlan((prev) => ({ ...prev, status: "ongoing" }))
        setHasCurrentPlan(true)
      }
    } catch (error) {
      console.error("Error registering plan:", error)

      let errorMessage = "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i."

      if (error.response?.data?.message) {
        errorMessage = error.response.data.message

        // X·ª≠ l√Ω l·ªói template ƒë·∫∑c bi·ªát
        if (errorMessage.includes("template")) {
          errorMessage = "Ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω c√°c k·∫ø ho·∫°ch m·∫´u (template). Vui l√≤ng ch·ªçn k·∫ø ho·∫°ch kh√°c."
        }
      } else if (error.response?.status === 400) {
        errorMessage = "Ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω k·∫ø ho·∫°ch m·∫´u. Vui l√≤ng ki·ªÉm tra l·∫°i."
      } else if (error.response?.status === 401) {
        errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
      } else if (error.response?.status === 409) {
        errorMessage = "B·∫°n ƒë√£ c√≥ k·∫ø ho·∫°ch ƒëang th·ª±c hi·ªán. Vui l√≤ng ho√†n th√†nh k·∫ø ho·∫°ch hi·ªán t·∫°i tr∆∞·ªõc."
      }

      Alert.alert("L·ªói ƒëƒÉng k√Ω", errorMessage)
    } finally {
      setRegistering(false)
    }
  }

  const renderStages = () => {
    if (!stages || stages.length === 0) return null

    return (
      <View style={styles.stagesSection}>
        <Text style={styles.sectionTitle}>
          <Ionicons name="list" size={20} color={COLORS.primary} /> C√°c giai ƒëo·∫°n ({stages.length})
        </Text>

        {stages.map((stage, index) => (
          <View key={stage._id} style={styles.stageCard}>
            <View style={styles.stageHeader}>
              <View style={styles.stageNumber}>
                <Text style={styles.stageNumberText}>{index + 1}</Text>
              </View>
              <View style={styles.stageInfo}>
                <Text style={styles.stageName}>{stage.stage_name}</Text>
                <Text style={styles.stageDescription}>{stage.description}</Text>
                <Text style={styles.stageDuration}>Th·ªùi gian: {stage.duration} ng√†y</Text>
              </View>
              {stage.completed && <Ionicons name="checkmark-circle" size={24} color={COLORS.success} />}
            </View>
          </View>
        ))}
      </View>
    )
  }

  const renderProgress = () => {
    if (!progress || progress.length === 0) return null

    return (
      <View style={styles.progressSection}>
        <Text style={styles.sectionTitle}>
          <Ionicons name="trending-up" size={20} color={COLORS.primary} /> Ti·∫øn ƒë·ªô g·∫ßn ƒë√¢y
        </Text>

        {progress.slice(0, 3).map((item) => (
          <View key={item._id} style={styles.progressCard}>
            <View style={styles.progressHeader}>
              <Text style={styles.progressDate}>{new Date(item.date).toLocaleDateString("vi-VN")}</Text>
              <Text style={styles.cigarettesCount}>{item.cigarettesSmoked} ƒëi·∫øu</Text>
            </View>
            <Text style={styles.healthStatus}>{item.healthStatus}</Text>
            {item.notes && <Text style={styles.progressNotes}>{item.notes}</Text>}
          </View>
        ))}
      </View>
    )
  }

  const renderActionButtons = () => {
    if (isTemplate) {
      // Ch·ªâ hi·ªÉn th·ªã n√∫t ƒëƒÉng k√Ω cho template plans
      return (
        <TouchableOpacity style={styles.registerButton} onPress={handleRegisterPlan} disabled={registering}>
          <LinearGradient colors={[COLORS.primary, COLORS.accent]} style={styles.registerButtonGradient}>
            {registering ? (
              <ActivityIndicator size="small" color={COLORS.white} />
            ) : (
              <>
                <Ionicons name="add-circle" size={24} color={COLORS.white} />
                <Text style={styles.registerButtonText}>
                  {hasCurrentPlan ? "Thay th·∫ø k·∫ø ho·∫°ch hi·ªán t·∫°i" : "ƒêƒÉng k√Ω k·∫ø ho·∫°ch n√†y"}
                </Text>
              </>
            )}
          </LinearGradient>
        </TouchableOpacity>
      )
    }

    // Hi·ªÉn th·ªã th√¥ng tin tr·∫°ng th√°i cho c√°c k·∫ø ho·∫°ch kh√¥ng ph·∫£i template
    return (
      <View style={styles.statusInfo}>
        <Ionicons name={statusConfig.icon} size={24} color={statusConfig.color} />
        <View style={styles.statusInfoContent}>
          <Text style={[styles.statusInfoTitle, { color: statusConfig.color }]}>Tr·∫°ng th√°i: {statusConfig.label}</Text>
          {plan.status === "ongoing" && (
            <Text style={styles.statusInfoDescription}>
              K·∫ø ho·∫°ch n√†y ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán. B·∫°n c√≥ th·ªÉ theo d√µi ti·∫øn ƒë·ªô trong ph·∫ßn "K·∫ø ho·∫°ch hi·ªán t·∫°i".
            </Text>
          )}
          {plan.status === "completed" && (
            <Text style={styles.statusInfoDescription}>K·∫ø ho·∫°ch n√†y ƒë√£ ho√†n th√†nh th√†nh c√¥ng! üéâ</Text>
          )}
          {plan.status === "failed" && (
            <Text style={styles.statusInfoDescription}>
              K·∫ø ho·∫°ch n√†y ƒë√£ k·∫øt th√∫c. B·∫°n c√≥ th·ªÉ ch·ªçn k·∫ø ho·∫°ch m·∫´u kh√°c ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.
            </Text>
          )}
        </View>
      </View>
    )
  }

  useEffect(() => {
    if (plan) {
      const config = STATUS_CONFIG[plan.status] || STATUS_CONFIG.template
      setStatusConfig(config)
      setIsTemplate(plan.status === "template")
      console.log("Plan status:", plan.status)
      console.log("Is template:", plan.status === "template")
      console.log("Plan data:", plan)
    }
  }, [plan])

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>ƒêang t·∫£i chi ti·∫øt k·∫ø ho·∫°ch...</Text>
      </View>
    )
  }

  if (!plan) {
    return (
      <View style={styles.errorContainer}>
        <Ionicons name="alert-circle-outline" size={64} color={COLORS.error} />
        <Text style={styles.errorText}>Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch</Text>
        <TouchableOpacity style={styles.retryButton} onPress={loadPlanDetail}>
          <Text style={styles.retryButtonText}>Th·ª≠ l·∫°i</Text>
        </TouchableOpacity>
      </View>
    )
  }

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <LinearGradient colors={statusConfig.gradient} style={styles.headerGradient}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color={COLORS.white} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Chi ti·∫øt k·∫ø ho·∫°ch</Text>
          <View style={styles.placeholder} />
        </View>
      </LinearGradient>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.content}>
          {/* Plan Image */}
          <View style={styles.imageContainer}>
            <Image
              source={{
                uri: plan.image || "https://via.placeholder.com/400x200?text=K·∫ø+ho·∫°ch+b·ªè+thu·ªëc",
              }}
              style={styles.planImage}
              resizeMode="cover"
            />

            {/* Status Badge */}
            <View style={[styles.statusBadge, { backgroundColor: statusConfig.color }]}>
              <Ionicons name={statusConfig.icon} size={16} color={COLORS.white} />
              <Text style={styles.statusText}>{statusConfig.label}</Text>
            </View>
          </View>

          {/* Plan Info */}
          <View style={styles.infoSection}>
            <Text style={styles.planTitle}>{plan.title || "K·∫ø ho·∫°ch b·ªè thu·ªëc"}</Text>
            <Text style={styles.planReason}>{plan.reason || "Kh√¥ng c√≥ m√¥ t·∫£"}</Text>

            {/* Template Info for templates */}
            {isTemplate && (
              <View style={styles.templateInfo}>
                <View style={styles.templateInfoCard}>
                  <Ionicons name="information-circle" size={24} color={COLORS.info} />
                  <View style={styles.templateInfoText}>
                    <Text style={styles.templateInfoTitle}>K·∫ø ho·∫°ch m·∫´u</Text>
                    <Text style={styles.templateInfoDescription}>
                      Khi ƒëƒÉng k√Ω, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông thi·∫øt l·∫≠p ng√†y b·∫Øt ƒë·∫ßu (h√¥m nay) v√† c√°c giai ƒëo·∫°n d·ª±a tr√™n th·ªùi
                      gian c·ªßa template.
                    </Text>
                  </View>
                </View>
              </View>
            )}

            {/* Coach Info */}
            {plan.coachId && (
              <View style={styles.coachSection}>
                <Text style={styles.sectionTitle}>
                  <Ionicons name="person" size={20} color={COLORS.primary} /> Hu·∫•n luy·ªán vi√™n
                </Text>
                <View style={styles.coachCard}>
                  <View style={styles.coachAvatar}>
                    <Ionicons name="school" size={24} color={COLORS.primary} />
                  </View>
                  <View style={styles.coachInfo}>
                    <Text style={styles.coachName}>{plan.coachId.userName}</Text>
                    <Text style={styles.coachEmail}>{plan.coachId.email}</Text>
                  </View>
                </View>
              </View>
            )}

            {/* Plan Details */}
            <View style={styles.detailsSection}>
              <Text style={styles.sectionTitle}>
                <Ionicons name="information-circle" size={20} color={COLORS.primary} /> Th√¥ng tin chi ti·∫øt
              </Text>

              <View style={styles.detailCard}>
                <View style={styles.detailItem}>
                  <Ionicons name="calendar-outline" size={20} color={COLORS.primary} />
                  <View style={styles.detailContent}>
                    <Text style={styles.detailLabel}>Th·ªùi gian th·ª±c hi·ªán</Text>
                    <Text style={styles.detailValue}>{plan.duration || 0} ng√†y</Text>
                  </View>
                </View>

                {plan.startDate && (
                  <View style={styles.detailItem}>
                    <Ionicons name="play-outline" size={20} color={COLORS.success} />
                    <View style={styles.detailContent}>
                      <Text style={styles.detailLabel}>Ng√†y b·∫Øt ƒë·∫ßu</Text>
                      <Text style={styles.detailValue}>{new Date(plan.startDate).toLocaleDateString("vi-VN")}</Text>
                    </View>
                  </View>
                )}

                {plan.endDate && (
                  <View style={styles.detailItem}>
                    <Ionicons name="flag-outline" size={20} color={COLORS.error} />
                    <View style={styles.detailContent}>
                      <Text style={styles.detailLabel}>Ng√†y k·∫øt th√∫c</Text>
                      <Text style={styles.detailValue}>{new Date(plan.endDate).toLocaleDateString("vi-VN")}</Text>
                    </View>
                  </View>
                )}
              </View>
            </View>

            {/* Stages */}
            {renderStages()}

            {/* Progress */}
            {renderProgress()}

            {/* Action Buttons */}
            <View style={styles.actionSection}>{renderActionButtons()}</View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: COLORS.background,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: COLORS.primary,
    fontWeight: "500",
  },
  errorContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: COLORS.background,
    padding: 20,
  },
  errorText: {
    marginTop: 16,
    fontSize: 16,
    color: COLORS.error,
    fontWeight: "500",
    textAlign: "center",
  },
  retryButton: {
    marginTop: 16,
    backgroundColor: COLORS.primary,
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: COLORS.white,
    fontWeight: "500",
  },
  headerGradient: {
    paddingTop: 10,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 20,
    paddingBottom: 15,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "rgba(255,255,255,0.2)",
    justifyContent: "center",
    alignItems: "center",
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: COLORS.white,
  },
  placeholder: {
    width: 40,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  imageContainer: {
    position: "relative",
    height: 250,
  },
  planImage: {
    width: "100%",
    height: "100%",
  },
  statusBadge: {
    position: "absolute",
    top: 20,
    right: 20,
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  statusText: {
    fontSize: 14,
    color: COLORS.white,
    fontWeight: "600",
    marginLeft: 6,
  },
  infoSection: {
    padding: 20,
  },
  planTitle: {
    fontSize: 24,
    fontWeight: "bold",
    color: COLORS.text,
    marginBottom: 12,
  },
  planReason: {
    fontSize: 16,
    color: COLORS.lightText,
    lineHeight: 24,
    marginBottom: 24,
  },
  templateInfo: {
    marginBottom: 24,
  },
  templateInfoCard: {
    flexDirection: "row",
    alignItems: "flex-start",
    backgroundColor: COLORS.info + "10",
    borderRadius: 12,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: COLORS.info,
  },
  templateInfoText: {
    flex: 1,
    marginLeft: 12,
  },
  templateInfoTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: COLORS.info,
    marginBottom: 4,
  },
  templateInfoDescription: {
    fontSize: 14,
    color: COLORS.lightText,
    lineHeight: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: COLORS.secondary,
    marginBottom: 16,
    flexDirection: "row",
    alignItems: "center",
  },
  coachSection: {
    marginBottom: 24,
  },
  coachCard: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  coachAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: COLORS.lightBackground,
    justifyContent: "center",
    alignItems: "center",
    marginRight: 16,
  },
  coachInfo: {
    flex: 1,
  },
  coachName: {
    fontSize: 16,
    fontWeight: "600",
    color: COLORS.text,
    marginBottom: 4,
  },
  coachEmail: {
    fontSize: 14,
    color: COLORS.lightText,
  },
  detailsSection: {
    marginBottom: 24,
  },
  detailCard: {
    backgroundColor: COLORS.white,
    borderRadius: 16,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  detailItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.lightBackground,
  },
  detailContent: {
    flex: 1,
    marginLeft: 16,
  },
  detailLabel: {
    fontSize: 12,
    color: COLORS.lightText,
    marginBottom: 4,
    fontWeight: "500",
  },
  detailValue: {
    fontSize: 16,
    color: COLORS.text,
    fontWeight: "600",
  },
  stagesSection: {
    marginBottom: 24,
  },
  stageCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  stageHeader: {
    flexDirection: "row",
    alignItems: "flex-start",
  },
  stageNumber: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: COLORS.primary,
    justifyContent: "center",
    alignItems: "center",
    marginRight: 12,
  },
  stageNumberText: {
    fontSize: 14,
    fontWeight: "bold",
    color: COLORS.white,
  },
  stageInfo: {
    flex: 1,
  },
  stageName: {
    fontSize: 16,
    fontWeight: "600",
    color: COLORS.text,
    marginBottom: 4,
  },
  stageDescription: {
    fontSize: 14,
    color: COLORS.lightText,
    marginBottom: 8,
  },
  stageDuration: {
    fontSize: 12,
    color: COLORS.primary,
    fontWeight: "500",
  },
  progressSection: {
    marginBottom: 24,
  },
  progressCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  progressHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  progressDate: {
    fontSize: 14,
    fontWeight: "600",
    color: COLORS.text,
  },
  cigarettesCount: {
    fontSize: 14,
    fontWeight: "600",
    color: COLORS.error,
  },
  healthStatus: {
    fontSize: 14,
    color: COLORS.success,
    marginBottom: 4,
  },
  progressNotes: {
    fontSize: 12,
    color: COLORS.lightText,
    fontStyle: "italic",
  },
  actionSection: {
    marginBottom: 40,
  },
  registerButton: {
    borderRadius: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  registerButtonGradient: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 18,
    paddingHorizontal: 24,
    borderRadius: 16,
  },
  registerButtonText: {
    fontSize: 18,
    color: COLORS.white,
    fontWeight: "bold",
    marginLeft: 12,
  },
  statusInfo: {
    flexDirection: "row",
    alignItems: "flex-start",
    backgroundColor: COLORS.white,
    padding: 20,
    borderRadius: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statusInfoContent: {
    flex: 1,
    marginLeft: 12,
  },
  statusInfoTitle: {
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 4,
  },
  statusInfoDescription: {
    fontSize: 14,
    color: COLORS.lightText,
    lineHeight: 20,
  },
})
