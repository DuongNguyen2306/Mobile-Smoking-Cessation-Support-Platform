"use client"

import { Ionicons } from "@expo/vector-icons"
import { LinearGradient } from "expo-linear-gradient"
import { useLocalSearchParams, useRouter } from "expo-router"
import { useEffect, useState } from "react"
import {
    ActivityIndicator,
    Alert,
    Dimensions,
    KeyboardAvoidingView,
    Platform,
    SafeAreaView,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    View,
} from "react-native"
import { fetchBlogBySlug, fetchBlogs, getBlogById, updateBlog } from "../services/api"

const { width } = Dimensions.get("window")

export default function EditBlogScreen() {
  const router = useRouter()
  const params = useLocalSearchParams()

  console.log("üîç All params received:", params)
  console.log("üîç blogId from params:", params.blogId)
  console.log("üîç slug from params:", params.slug)

  const [formData, setFormData] = useState({
    title: "",
    description: "",
    image: "",
    tags: "",
  })
  const [loading, setLoading] = useState(false)
  const [initialLoading, setInitialLoading] = useState(true)
  const [originalData, setOriginalData] = useState(null)

  useEffect(() => {
    if (params.blogId || params.slug) {
      loadBlogData()
    } else {
      console.log("‚ùå Kh√¥ng c√≥ blogId ho·∫∑c slug trong params")
      Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ID b√†i vi·∫øt", [{ text: "OK", onPress: () => router.back() }])
    }
  }, [params.blogId, params.slug])

  const loadBlogData = async () => {
    try {
      console.log("üì° B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu blog...")
      console.log("üîç S·ª≠ d·ª•ng blogId:", params.blogId)
      console.log("üîç S·ª≠ d·ª•ng slug:", params.slug)

      let blog = null

      // Ph∆∞∆°ng ph√°p 1: Th·ª≠ l·∫•y b·∫±ng ID tr·ª±c ti·∫øp
      if (params.blogId) {
        try {
          console.log("üì° Th·ª≠ method 1: getBlogById")
          const response = await getBlogById(params.blogId)
          console.log("‚úÖ Response t·ª´ getBlogById:", response.data)

          if (response.data.success && response.data.data) {
            blog = response.data.data
            console.log("‚úÖ T√¨m th·∫•y blog b·∫±ng ID:", blog)
          } else {
            console.log("‚ùå API tr·∫£ v·ªÅ success nh∆∞ng data null")
          }
        } catch (idError) {
          console.log("‚ùå L·ªói khi l·∫•y b·∫±ng ID:", idError.response?.data || idError.message)
        }
      }

      // Ph∆∞∆°ng ph√°p 2: N·∫øu ch∆∞a c√≥ blog, th·ª≠ l·∫•y b·∫±ng slug
      if (!blog && params.slug) {
        try {
          console.log("üì° Th·ª≠ method 2: fetchBlogBySlug")
          const response = await fetchBlogBySlug(params.slug)
          console.log("‚úÖ Response t·ª´ fetchBlogBySlug:", response.data)

          if (response.data.success && response.data.data) {
            blog = response.data.data
            console.log("‚úÖ T√¨m th·∫•y blog b·∫±ng slug:", blog)
          }
        } catch (slugError) {
          console.log("‚ùå L·ªói khi l·∫•y b·∫±ng slug:", slugError.response?.data || slugError.message)
        }
      }

      // Ph∆∞∆°ng ph√°p 3: L·∫•y t·∫•t c·∫£ blogs v√† t√¨m blog c·∫ßn thi·∫øt
      if (!blog) {
        try {
          console.log("üì° Th·ª≠ method 3: fetchBlogs v√† t√¨m blog")
          const response = await fetchBlogs()
          console.log("‚úÖ Response t·ª´ fetchBlogs:", response.data)

          const allBlogs = response.data.data?.blogs || response.data.blogs || response.data || []
          console.log("üìù T·ªïng s·ªë blogs:", allBlogs.length)

          // T√¨m blog theo ID ho·∫∑c slug
          if (params.blogId) {
            blog = allBlogs.find((b) => b._id === params.blogId || b.id === params.blogId)
            console.log("üîç T√¨m blog theo ID trong danh s√°ch:", blog ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")
          }

          if (!blog && params.slug) {
            blog = allBlogs.find((b) => b.slug === params.slug)
            console.log("üîç T√¨m blog theo slug trong danh s√°ch:", blog ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")
          }
        } catch (allBlogsError) {
          console.log("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ blogs:", allBlogsError.response?.data || allBlogsError.message)
        }
      }

      if (blog && blog.title) {
        console.log("‚úÖ T√¨m th·∫•y blog, ƒëang set form data...")
        console.log("üìù Blog data:", blog)

        // L∆∞u d·ªØ li·ªáu g·ªëc
        setOriginalData(blog)

        // X·ª≠ l√Ω tags
        let tagsString = ""
        if (blog.tags) {
          if (Array.isArray(blog.tags)) {
            tagsString = blog.tags.join(", ")
          } else if (typeof blog.tags === "string") {
            tagsString = blog.tags
          }
        }

        // Set form data
        const blogData = {
          title: blog.title || "",
          description: blog.description || blog.content || "",
          image: blog.image || "",
          tags: tagsString,
        }

        console.log("üìù Setting form data:", blogData)
        setFormData(blogData)
      } else {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y blog ho·∫∑c blog kh√¥ng c√≥ title")
        console.log("‚ùå Blog object:", blog)

        Alert.alert(
          "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt",
          `Kh√¥ng th·ªÉ t√¨m th·∫•y b√†i vi·∫øt v·ªõi:\n- ID: ${params.blogId || "N/A"}\n- Slug: ${params.slug || "N/A"}\n\nC√≥ th·ªÉ b√†i vi·∫øt ƒë√£ b·ªã x√≥a ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.`,
          [{ text: "OK", onPress: () => router.back() }],
        )
      }
    } catch (error) {
      console.error("‚ùå L·ªói t·∫£i blog:", error)
      console.error("‚ùå Error response:", error.response?.data)
      console.error("‚ùå Error message:", error.message)

      Alert.alert("L·ªói", `Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√†i vi·∫øt.\nL·ªói: ${error.response?.data?.message || error.message}`, [
        { text: "OK", onPress: () => router.back() },
      ])
    } finally {
      setInitialLoading(false)
    }
  }

  const handleInputChange = (field, value) => {
    console.log(`üìù Changing ${field} to:`, value)
    setFormData((prev) => {
      const newData = { ...prev, [field]: value }
      console.log("üìù New form data:", newData)
      return newData
    })
  }

  const validateForm = () => {
    console.log("üîç Validating form:", formData)
    if (!formData.title.trim()) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt")
      return false
    }
    if (!formData.description.trim()) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung b√†i vi·∫øt")
      return false
    }
    return true
  }

  const handleSubmit = async () => {
    if (!validateForm()) return

    setLoading(true)
    try {
      const tagsArray = formData.tags
        .split(",")
        .map((tag) => tag.trim())
        .filter((tag) => tag.length > 0)

      const blogData = {
        title: formData.title,
        description: formData.description,
        image: formData.image || "https://example.com/images/quit-smoking.jpg",
        tags: tagsArray.length > 0 ? tagsArray : ["quit-smoking"],
      }

      const updateId = originalData?._id || originalData?.id || params.blogId
      console.log("üì§ ƒêang c·∫≠p nh·∫≠t blog v·ªõi ID:", updateId)
      console.log("üì§ D·ªØ li·ªáu c·∫≠p nh·∫≠t:", blogData)

      const response = await updateBlog(updateId, blogData)

      console.log("‚úÖ C·∫≠p nh·∫≠t blog th√†nh c√¥ng:", response.data)
      Alert.alert("Th√†nh c√¥ng", "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!", [
        {
          text: "OK",
          onPress: () => router.back(),
        },
      ])
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t blog:", error)
      const errorMessage = error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i."
      Alert.alert("L·ªói", errorMessage)
    } finally {
      setLoading(false)
    }
  }

  // Debug render
  console.log("üé® Rendering with formData:", formData)
  console.log("üé® Initial loading:", initialLoading)

  if (initialLoading) {
    return (
      <View style={styles.loadingContainer}>
        <LinearGradient colors={["#E8F5E8", "#F1F8E9"]} style={styles.loadingGradient}>
          <ActivityIndicator size="large" color="#4CAF50" />
          <Text style={styles.loadingText}>ƒêang t·∫£i d·ªØ li·ªáu b√†i vi·∫øt...</Text>
          <Text style={styles.debugText}>ID: {params.blogId}</Text>
          <Text style={styles.debugText}>Slug: {params.slug}</Text>
        </LinearGradient>
      </View>
    )
  }

  return (
    <SafeAreaView style={styles.container}>
      <LinearGradient colors={["#2E7D32", "#4CAF50"]} style={styles.headerGradient}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#FFFFFF" />
          </TouchableOpacity>
          <View style={styles.headerTextContainer}>
            <Text style={styles.headerTitle}>Ch·ªânh S·ª≠a B√†i Vi·∫øt</Text>
            <Text style={styles.headerSubtitle}>
              {originalData?.title ? `"${originalData.title}"` : "C·∫≠p nh·∫≠t n·ªôi dung c·ªßa b·∫°n"}
            </Text>
          </View>
        </View>
      </LinearGradient>

      <KeyboardAvoidingView style={styles.content} behavior={Platform.OS === "ios" ? "padding" : "height"}>
        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          <View style={styles.form}>
            {/* Th√¥ng tin blog g·ªëc */}
            {originalData && (
              <View style={styles.originalInfo}>
                <Text style={styles.originalInfoTitle}>
                  <Ionicons name="information-circle" size={16} color="#2196F3" /> Th√¥ng tin g·ªëc
                </Text>
                <Text style={styles.originalInfoText}>ƒêang ch·ªânh s·ª≠a: "{originalData.title}"</Text>
                <Text style={styles.originalInfoDate}>
                  T·∫°o l√∫c: {originalData.createdAt ? new Date(originalData.createdAt).toLocaleString("vi-VN") : "N/A"}
                </Text>
              </View>
            )}

            <View style={styles.inputGroup}>
              <Text style={styles.label}>
                <Ionicons name="create-outline" size={16} color="#4CAF50" /> Ti√™u ƒë·ªÅ b√†i vi·∫øt *
              </Text>
              <TextInput
                style={styles.input}
                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                value={formData.title}
                onChangeText={(value) => handleInputChange("title", value)}
                maxLength={100}
              />
              <Text style={styles.charCount}>{formData.title.length}/100</Text>
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>
                <Ionicons name="document-text-outline" size={16} color="#4CAF50" /> N·ªôi dung b√†i vi·∫øt *
              </Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                placeholder="Chia s·∫ª kinh nghi·ªám, c√¢u chuy·ªán c·ªßa b·∫°n v·ªÅ h√†nh tr√¨nh b·ªè thu·ªëc l√°..."
                value={formData.description}
                onChangeText={(value) => handleInputChange("description", value)}
                multiline
                numberOfLines={6}
                textAlignVertical="top"
                maxLength={1000}
              />
              <Text style={styles.charCount}>{formData.description.length}/1000</Text>
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>
                <Ionicons name="image-outline" size={16} color="#4CAF50" /> H√¨nh ·∫£nh (URL)
              </Text>
              <TextInput
                style={styles.input}
                placeholder="https://example.com/image.jpg"
                value={formData.image}
                onChangeText={(value) => handleInputChange("image", value)}
                keyboardType="url"
              />
              <Text style={styles.hint}>ƒê·ªÉ tr·ªëng ƒë·ªÉ s·ª≠ d·ª•ng h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh</Text>
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>
                <Ionicons name="pricetags-outline" size={16} color="#4CAF50" /> Th·∫ª tag
              </Text>
              <TextInput
                style={styles.input}
                placeholder="quit-smoking, health, motivation (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)"
                value={formData.tags}
                onChangeText={(value) => handleInputChange("tags", value)}
              />
              <Text style={styles.hint}>Ph√¢n c√°ch c√°c tag b·∫±ng d·∫•u ph·∫©y</Text>
            </View>

            <View style={styles.previewSection}>
              <Text style={styles.previewTitle}>
                <Ionicons name="eye-outline" size={16} color="#4CAF50" /> Xem tr∆∞·ªõc thay ƒë·ªïi
              </Text>
              <View style={styles.previewCard}>
                <LinearGradient colors={["#FFFFFF", "#F8FFF8"]} style={styles.previewGradient}>
                  <View style={styles.previewHeader}>
                    <View style={styles.categoryBadge}>
                      <Ionicons name="leaf" size={12} color="#4CAF50" />
                      <Text style={styles.categoryText}>S·ª©c kh·ªèe</Text>
                    </View>
                  </View>
                  <Text style={styles.previewCardTitle} numberOfLines={2}>
                    {formData.title || "Ti√™u ƒë·ªÅ b√†i vi·∫øt s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y"}
                  </Text>
                  <Text style={styles.previewCardDescription} numberOfLines={3}>
                    {formData.description || "N·ªôi dung b√†i vi·∫øt s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."}
                  </Text>
                </LinearGradient>
              </View>
            </View>
          </View>
        </ScrollView>

        <View style={styles.footer}>
          <TouchableOpacity
            style={[styles.submitButton, loading && styles.submitButtonDisabled]}
            onPress={handleSubmit}
            disabled={loading}
          >
            <LinearGradient
              colors={loading ? ["#CCCCCC", "#AAAAAA"] : ["#FF9800", "#F57C00"]}
              style={styles.submitGradient}
            >
              {loading ? (
                <View style={styles.loadingContainer}>
                  <Text style={styles.submitButtonText}>ƒêang c·∫≠p nh·∫≠t...</Text>
                </View>
              ) : (
                <View style={styles.submitContainer}>
                  <Ionicons name="save" size={20} color="#FFFFFF" />
                  <Text style={styles.submitButtonText}>L∆∞u Thay ƒê·ªïi</Text>
                </View>
              )}
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8FFF8",
  },
  loadingContainer: {
    flex: 1,
  },
  loadingGradient: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: "#4CAF50",
    fontWeight: "500",
  },
  debugText: {
    fontSize: 12,
    color: "#666",
    marginTop: 4,
  },
  headerGradient: {
    paddingTop: 20,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    justifyContent: "center",
    alignItems: "center",
    marginRight: 16,
  },
  headerTextContainer: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: "bold",
    color: "#FFFFFF",
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 14,
    color: "rgba(255, 255, 255, 0.8)",
  },
  content: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 100,
  },
  form: {
    padding: 20,
  },
  originalInfo: {
    backgroundColor: "rgba(33, 150, 243, 0.1)",
    padding: 16,
    borderRadius: 12,
    marginBottom: 24,
    borderLeftWidth: 4,
    borderLeftColor: "#2196F3",
  },
  originalInfoTitle: {
    fontSize: 14,
    fontWeight: "600",
    color: "#2196F3",
    marginBottom: 8,
  },
  originalInfoText: {
    fontSize: 14,
    color: "#333",
    fontWeight: "500",
    marginBottom: 4,
  },
  originalInfoDate: {
    fontSize: 12,
    color: "#666",
  },
  inputGroup: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    color: "#2E7D32",
    marginBottom: 8,
    flexDirection: "row",
    alignItems: "center",
  },
  input: {
    borderWidth: 1,
    borderColor: "#E0E0E0",
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: "#FFFFFF",
    color: "#333",
  },
  textArea: {
    height: 120,
    paddingTop: 12,
  },
  charCount: {
    fontSize: 12,
    color: "#888",
    textAlign: "right",
    marginTop: 4,
  },
  hint: {
    fontSize: 12,
    color: "#888",
    marginTop: 4,
    fontStyle: "italic",
  },
  previewSection: {
    marginTop: 8,
  },
  previewTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#2E7D32",
    marginBottom: 12,
  },
  previewCard: {
    borderRadius: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  previewGradient: {
    borderRadius: 16,
    padding: 16,
  },
  previewHeader: {
    marginBottom: 8,
  },
  categoryBadge: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#E8F5E8",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: "flex-start",
  },
  categoryText: {
    fontSize: 12,
    color: "#4CAF50",
    fontWeight: "500",
    marginLeft: 4,
  },
  previewCardTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#2E7D32",
    marginBottom: 8,
    lineHeight: 22,
  },
  previewCardDescription: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
  footer: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "#F8FFF8",
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  submitButton: {
    borderRadius: 12,
    overflow: "hidden",
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitGradient: {
    paddingVertical: 16,
    paddingHorizontal: 24,
    alignItems: "center",
    justifyContent: "center",
  },
  submitContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  loadingContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  submitButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#FFFFFF",
    marginLeft: 8,
  },
})
